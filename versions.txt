v1.0
- without any optimizations
- conditional transformation analysis is NOT YET implemented --> would kill the performance
- getPossibleExtractAttributeToOwnEntitySetTransformations Analysis is turned off --> would kill the performance
- small examples run in up to 30 seconds (see tests/testReport_smallExamples)
- large examples are not runnable in any reasonable amount of time

v1.1
- tree-pruning optimization implemented (without node ordering)
- small examples run in up to 30 seconds (globally better than v1.0) (see tests/testReport_smallExamples_pruned)
- large examples are not runnable in any reasonable amount of time

v1.2
- technical optimizations implemented
- ArrayLists with exact length used instead of Arrays
- StringBuilder used instead of StringBuffer
- Parsing composite names optimized
- Java Enum used for enum values instead of (public static final String)
- Avoidable list constructions removed
- small examples run in up to 20 seconds (globally better than v1.1) (see tests/testReport_smallExamples_technicalOpt)

v1.3
- more technical optimizations implemented
- mapping penalty computation - transformation list is not extended and penalized. Instead, penalty is computed right away (without list extension)
- mapping penalty computation - instead of 'objectsToProcess' list, object.isProcessed boolean flag is used, to prevent list construction and maintenance.
- transformation pooling implemented. 
- small examples run in up to 11 seconds (globally better than v1.2) (see tests/testReport_smallExamples_technicalOpt_v4)

v1.4
- logic optimizations:
- direct descendants ordering, for better prunning
- ignoring independent node order during traversal
- additional constraints on attribute transformations